// Generated by CoffeeScript 1.7.1
(function() {
  define(['angular'], function(ng) {
    var module;
    module = ng.module('users', []);
    module.controller('UsersController', [
      '$scope', 'users', function($scope, usersService) {
        var editingUserBackup;
        $scope.users = [];
        $scope.newUser = {};
        $scope.editingUser = null;
        editingUserBackup = null;
        usersService.updateUsersInScope($scope);
        $scope.deleteUser = function(user) {
          return usersService.deleteUser($scope, user);
        };
        $scope.addUser = function() {
          if ($scope.newUser && $scope.newUser.name) {
            return usersService.addUser($scope, ng.copy($scope.newUser)).then(function() {
              $scope.newUser = {};
              return $scope.newUserForm.$setPristine(true);
            }, function(e) {
              return console.error(e);
            });
          }
        };
        $scope.editUser = function(user) {
          editingUserBackup = ng.copy(user);
          return $scope.editingUser = user;
        };
        $scope.editUserApply = function() {
          return usersService.updateUser($scope, ng.copy($scope.editingUser))["finally"](function() {
            return $scope.editingUser = editingUserBackup = null;
          });
        };
        $scope.editUserCancel = function() {
          $scope.editingUser.name = editingUserBackup.name;
          return $scope.editingUser = editingUserBackup = null;
        };
        return $scope.editKeyUp = function(event) {
          switch (event.keyCode) {
            case 13:
              return $scope.editUserApply();
            case 27:
              return $scope.editUserCancel();
          }
        };
      }
    ]);
    module.service('users', [
      'toQ', 'usersDb', function(toQ, usersDb) {
        var fetchUsers, obj, options;
        options = {
          include_docs: true
        };
        fetchUsers = function() {
          return usersDb.allDocs(options).then(function(_) {
            return _.rows || [];
          });
        };
        return obj = {
          updateUsersInScope: function(scope) {
            return fetchUsers().then(function(rows) {
              return scope.$apply(function() {
                return scope.users = rows.map(function(_) {
                  return _.doc;
                });
              });
            });
          },
          deleteUser: function(scope, user) {
            usersDb.remove(user);
            return obj.updateUsersInScope(scope);
          },
          addUser: function(scope, user) {
            return toQ(function() {
              return usersDb.post(user).then(function() {
                return obj.updateUsersInScope(scope);
              });
            });
          },
          updateUser: function(scope, user) {
            return toQ(function() {
              return usersDb.put(user).then(function() {
                return obj.updateUsersInScope(scope);
              });
            });
          }
        };
      }
    ]);
    module.directive('cpFocusOn', [
      '$timeout', function($timeout) {
        return function(scope, element, attrs) {
          return scope.$watch(attrs.cpFocusOn, function(newValue, oldValue) {
            if (newValue === true && newValue !== oldValue) {
              return $timeout(function() {
                return element[0].focus();
              });
            }
          });
        };
      }
    ]);
    return module;
  });

}).call(this);

//# sourceMappingURL=users.map
